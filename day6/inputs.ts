export let LanternFish = Array<number>(1,1,1,1,1,5,1,1,1,5,1,1,3,1,5,1,4,1,5,1,2,5,1,1,1,1,3,1,4,5,1,1,2,1,1,1,2,4,3,2,1,1,2,1,5,4,4,1,4,1,1,1,4,1,3,1,1,1,2,1,1,1,1,1,1,1,5,4,4,2,4,5,2,1,5,3,1,3,3,1,1,5,4,1,1,3,5,1,1,1,4,4,2,4,1,1,4,1,1,2,1,1,1,2,1,5,2,5,1,1,1,4,1,2,1,1,1,2,2,1,3,1,4,4,1,1,3,1,4,1,1,1,2,5,5,1,4,1,4,4,1,4,1,2,4,1,1,4,1,3,4,4,1,1,5,3,1,1,5,1,3,4,2,1,3,1,3,1,1,1,1,1,1,1,1,1,4,5,1,1,1,1,3,1,1,5,1,1,4,1,1,3,1,1,5,2,1,4,4,1,4,1,2,1,1,1,1,2,1,4,1,1,2,5,1,4,4,1,1,1,4,1,1,1,5,3,1,4,1,4,1,1,3,5,3,5,5,5,1,5,1,1,1,1,1,1,1,1,2,3,3,3,3,4,2,1,1,4,5,3,1,1,5,5,1,1,2,1,4,1,3,5,1,1,1,5,2,2,1,4,2,1,1,4,1,3,1,1,1,3,1,5,1,5,1,1,4,1,2,1);

export type tCountoFush = {
    [key: string]: number,
    "0": number,
    "1" : number,
    "2" : number,
    "3" : number,
    "4" : number,
    "5" : number,
    "6" : number,
    "7" : number,
    "8" : number
}

export let CountoFush : tCountoFush = {
    "0": LanternFish.filter(n => n === 0).length,
    "1": LanternFish.filter(n => n === 1).length,
    "2": LanternFish.filter(n => n === 2).length,
    "3": LanternFish.filter(n => n === 3).length,
    "4": LanternFish.filter(n => n === 4).length,
    "5": LanternFish.filter(n => n === 5).length,
    "6": LanternFish.filter(n => n === 6).length,
    "7": 0,
    "8": 0
}