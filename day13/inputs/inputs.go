package inputs

import "fmt"

type Dot struct {
	X int
	Y int
}

func DotToString(dot *Dot) string {
	return fmt.Sprintf("%d,%d", dot.X, dot.Y)
}

var Inputs = []Dot{
	{X: 797, Y: 352},
	{X: 70, Y: 595},
	{X: 1049, Y: 372},
	{X: 887, Y: 710},
	{X: 774, Y: 607},
	{X: 581, Y: 348},
	{X: 827, Y: 238},
	{X: 341, Y: 1},
	{X: 1295, Y: 858},
	{X: 1017, Y: 854},
	{X: 370, Y: 430},
	{X: 937, Y: 465},
	{X: 592, Y: 51},
	{X: 604, Y: 850},
	{X: 1169, Y: 766},
	{X: 754, Y: 565},
	{X: 577, Y: 28},
	{X: 534, Y: 128},
	{X: 925, Y: 119},
	{X: 985, Y: 217},
	{X: 917, Y: 522},
	{X: 1275, Y: 64},
	{X: 897, Y: 74},
	{X: 239, Y: 723},
	{X: 547, Y: 450},
	{X: 1039, Y: 676},
	{X: 606, Y: 158},
	{X: 313, Y: 561},
	{X: 1275, Y: 463},
	{X: 513, Y: 352},
	{X: 278, Y: 494},
	{X: 634, Y: 436},
	{X: 909, Y: 31},
	{X: 480, Y: 176},
	{X: 18, Y: 100},
	{X: 417, Y: 807},
	{X: 1250, Y: 882},
	{X: 1158, Y: 485},
	{X: 1158, Y: 24},
	{X: 587, Y: 716},
	{X: 112, Y: 68},
	{X: 704, Y: 46},
	{X: 887, Y: 632},
	{X: 127, Y: 158},
	{X: 706, Y: 32},
	{X: 967, Y: 680},
	{X: 922, Y: 523},
	{X: 524, Y: 121},
	{X: 579, Y: 499},
	{X: 1268, Y: 654},
	{X: 475, Y: 662},
	{X: 20, Y: 516},
	{X: 1073, Y: 843},
	{X: 570, Y: 742},
	{X: 89, Y: 415},
	{X: 423, Y: 520},
	{X: 11, Y: 219},
	{X: 1125, Y: 784},
	{X: 585, Y: 614},
	{X: 1079, Y: 374},
	{X: 768, Y: 826},
	{X: 1216, Y: 840},
	{X: 1014, Y: 719},
	{X: 808, Y: 409},
	{X: 95, Y: 683},
	{X: 1221, Y: 418},
	{X: 1111, Y: 460},
	{X: 159, Y: 869},
	{X: 1159, Y: 404},
	{X: 5, Y: 395},
	{X: 1295, Y: 410},
	{X: 1111, Y: 879},
	{X: 233, Y: 555},
	{X: 156, Y: 238},
	{X: 1166, Y: 660},
	{X: 952, Y: 66},
	{X: 289, Y: 651},
	{X: 35, Y: 207},
	{X: 723, Y: 716},
	{X: 540, Y: 568},
	{X: 542, Y: 826},
	{X: 75, Y: 723},
	{X: 175, Y: 852},
	{X: 671, Y: 484},
	{X: 565, Y: 759},
	{X: 363, Y: 210},
	{X: 621, Y: 602},
	{X: 922, Y: 259},
	{X: 293, Y: 152},
	{X: 1287, Y: 348},
	{X: 703, Y: 469},
	{X: 1292, Y: 794},
	{X: 1005, Y: 884},
	{X: 423, Y: 268},
	{X: 514, Y: 301},
	{X: 862, Y: 800},
	{X: 35, Y: 324},
	{X: 219, Y: 864},
	{X: 70, Y: 299},
	{X: 800, Y: 611},
	{X: 937, Y: 669},
	{X: 187, Y: 236},
	{X: 512, Y: 187},
	{X: 464, Y: 810},
	{X: 92, Y: 147},
	{X: 5, Y: 445},
	{X: 35, Y: 239},
	{X: 233, Y: 339},
	{X: 1275, Y: 324},
	{X: 952, Y: 380},
	{X: 360, Y: 267},
	{X: 159, Y: 473},
	{X: 1275, Y: 100},
	{X: 530, Y: 375},
	{X: 1061, Y: 171},
	{X: 171, Y: 656},
	{X: 1001, Y: 768},
	{X: 648, Y: 861},
	{X: 586, Y: 840},
	{X: 1153, Y: 365},
	{X: 1136, Y: 494},
	{X: 800, Y: 283},
	{X: 55, Y: 226},
	{X: 1289, Y: 682},
	{X: 1203, Y: 478},
	{X: 763, Y: 444},
	{X: 244, Y: 50},
	{X: 401, Y: 31},
	{X: 284, Y: 661},
	{X: 1201, Y: 56},
	{X: 1221, Y: 479},
	{X: 239, Y: 781},
	{X: 1049, Y: 522},
	{X: 629, Y: 768},
	{X: 25, Y: 451},
	{X: 989, Y: 893},
	{X: 224, Y: 329},
	{X: 541, Y: 542},
	{X: 68, Y: 168},
	{X: 159, Y: 82},
	{X: 962, Y: 660},
	{X: 1169, Y: 234},
	{X: 1026, Y: 849},
	{X: 127, Y: 736},
	{X: 50, Y: 131},
	{X: 335, Y: 42},
	{X: 745, Y: 639},
	{X: 18, Y: 709},
	{X: 547, Y: 478},
	{X: 701, Y: 17},
	{X: 975, Y: 852},
	{X: 733, Y: 85},
	{X: 70, Y: 747},
	{X: 823, Y: 28},
	{X: 89, Y: 476},
	{X: 186, Y: 278},
	{X: 329, Y: 229},
	{X: 681, Y: 126},
	{X: 206, Y: 849},
	{X: 1238, Y: 145},
	{X: 1101, Y: 684},
	{X: 887, Y: 235},
	{X: 897, Y: 820},
	{X: 504, Y: 135},
	{X: 141, Y: 128},
	{X: 898, Y: 152},
	{X: 673, Y: 819},
	{X: 725, Y: 614},
	{X: 537, Y: 333},
	{X: 107, Y: 528},
	{X: 1144, Y: 75},
	{X: 652, Y: 656},
	{X: 206, Y: 781},
	{X: 510, Y: 611},
	{X: 701, Y: 877},
	{X: 363, Y: 684},
	{X: 796, Y: 301},
	{X: 120, Y: 576},
	{X: 475, Y: 232},
	{X: 1043, Y: 301},
	{X: 694, Y: 382},
	{X: 468, Y: 168},
	{X: 1121, Y: 523},
	{X: 341, Y: 721},
	{X: 5, Y: 1},
	{X: 251, Y: 753},
	{X: 641, Y: 781},
	{X: 704, Y: 158},
	{X: 472, Y: 212},
	{X: 952, Y: 175},
	{X: 518, Y: 254},
	{X: 17, Y: 712},
	{X: 997, Y: 561},
	{X: 1168, Y: 687},
	{X: 1290, Y: 572},
	{X: 102, Y: 341},
	{X: 769, Y: 800},
	{X: 54, Y: 250},
	{X: 1183, Y: 417},
	{X: 430, Y: 599},
	{X: 1265, Y: 17},
	{X: 271, Y: 39},
	{X: 889, Y: 224},
	{X: 87, Y: 723},
	{X: 18, Y: 185},
	{X: 565, Y: 387},
	{X: 1043, Y: 794},
	{X: 107, Y: 2},
	{X: 179, Y: 232},
	{X: 1078, Y: 392},
	{X: 1174, Y: 196},
	{X: 577, Y: 85},
	{X: 5, Y: 51},
	{X: 746, Y: 257},
	{X: 867, Y: 649},
	{X: 992, Y: 3},
	{X: 1039, Y: 218},
	{X: 117, Y: 882},
	{X: 373, Y: 221},
	{X: 922, Y: 399},
	{X: 633, Y: 682},
	{X: 519, Y: 268},
	{X: 77, Y: 866},
	{X: 100, Y: 886},
	{X: 909, Y: 583},
	{X: 510, Y: 548},
	{X: 1221, Y: 415},
	{X: 1186, Y: 519},
	{X: 254, Y: 667},
	{X: 846, Y: 278},
	{X: 467, Y: 658},
	{X: 306, Y: 719},
	{X: 619, Y: 512},
	{X: 1297, Y: 445},
	{X: 776, Y: 128},
	{X: 1275, Y: 431},
	{X: 293, Y: 516},
	{X: 405, Y: 723},
	{X: 513, Y: 766},
	{X: 361, Y: 264},
	{X: 319, Y: 208},
	{X: 423, Y: 632},
	{X: 1034, Y: 651},
	{X: 1292, Y: 548},
	{X: 483, Y: 691},
	{X: 1133, Y: 173},
	{X: 426, Y: 553},
	{X: 401, Y: 194},
	{X: 724, Y: 597},
	{X: 1285, Y: 451},
	{X: 956, Y: 868},
	{X: 423, Y: 626},
	{X: 1256, Y: 644},
	{X: 798, Y: 682},
	{X: 488, Y: 75},
	{X: 214, Y: 785},
	{X: 937, Y: 429},
	{X: 430, Y: 565},
	{X: 1139, Y: 875},
	{X: 20, Y: 458},
	{X: 584, Y: 267},
	{X: 1210, Y: 529},
	{X: 226, Y: 857},
	{X: 1069, Y: 820},
	{X: 1216, Y: 54},
	{X: 1084, Y: 37},
	{X: 355, Y: 392},
	{X: 370, Y: 799},
	{X: 159, Y: 418},
	{X: 997, Y: 51},
	{X: 341, Y: 273},
	{X: 1019, Y: 658},
	{X: 827, Y: 19},
	{X: 395, Y: 389},
	{X: 552, Y: 151},
	{X: 1263, Y: 469},
	{X: 378, Y: 31},
	{X: 467, Y: 796},
	{X: 1272, Y: 512},
	{X: 388, Y: 135},
	{X: 1009, Y: 891},
	{X: 661, Y: 144},
	{X: 1144, Y: 819},
	{X: 731, Y: 499},
	{X: 405, Y: 843},
	{X: 415, Y: 171},
	{X: 87, Y: 611},
	{X: 353, Y: 219},
	{X: 637, Y: 819},
	{X: 483, Y: 19},
	{X: 743, Y: 723},
	{X: 361, Y: 630},
	{X: 75, Y: 171},
	{X: 1099, Y: 693},
	{X: 1077, Y: 339},
	{X: 186, Y: 481},
	{X: 925, Y: 215},
	{X: 950, Y: 179},
	{X: 1135, Y: 852},
	{X: 541, Y: 352},
	{X: 676, Y: 436},
	{X: 616, Y: 382},
	{X: 385, Y: 215},
	{X: 141, Y: 234},
	{X: 547, Y: 814},
	{X: 370, Y: 213},
	{X: 791, Y: 626},
	{X: 775, Y: 187},
	{X: 1151, Y: 812},
	{X: 987, Y: 320},
	{X: 212, Y: 774},
	{X: 510, Y: 794},
	{X: 291, Y: 158},
	{X: 512, Y: 458},
	{X: 1168, Y: 436},
	{X: 763, Y: 864},
	{X: 233, Y: 670},
	{X: 373, Y: 673},
	{X: 400, Y: 774},
	{X: 1102, Y: 607},
	{X: 284, Y: 337},
	{X: 681, Y: 768},
	{X: 1169, Y: 10},
	{X: 724, Y: 54},
	{X: 48, Y: 46},
	{X: 981, Y: 665},
	{X: 1305, Y: 472},
	{X: 746, Y: 705},
	{X: 964, Y: 182},
	{X: 1183, Y: 736},
	{X: 716, Y: 311},
	{X: 226, Y: 275},
	{X: 1151, Y: 418},
	{X: 25, Y: 320},
	{X: 1233, Y: 866},
	{X: 1056, Y: 151},
	{X: 947, Y: 210},
	{X: 1044, Y: 75},
	{X: 266, Y: 47},
	{X: 109, Y: 56},
	{X: 107, Y: 668},
	{X: 1129, Y: 350},
	{X: 348, Y: 10},
	{X: 1260, Y: 315},
	{X: 413, Y: 74},
	{X: 1190, Y: 781},
	{X: 964, Y: 570},
	{X: 78, Y: 35},
	{X: 956, Y: 250},
	{X: 141, Y: 766},
	{X: 276, Y: 651},
	{X: 535, Y: 707},
	{X: 1089, Y: 887},
	{X: 1141, Y: 141},
	{X: 189, Y: 523},
	{X: 1044, Y: 819},
	{X: 159, Y: 476},
	{X: 800, Y: 100},
	{X: 33, Y: 154},
	{X: 1240, Y: 299},
	{X: 318, Y: 891},
	{X: 440, Y: 785},
	{X: 1057, Y: 759},
	{X: 1073, Y: 866},
	{X: 376, Y: 95},
	{X: 1014, Y: 66},
	{X: 45, Y: 877},
	{X: 703, Y: 425},
	{X: 382, Y: 80},
	{X: 846, Y: 250},
	{X: 554, Y: 171},
	{X: 565, Y: 59},
	{X: 1285, Y: 574},
	{X: 388, Y: 399},
	{X: 636, Y: 100},
	{X: 1203, Y: 416},
	{X: 186, Y: 726},
	{X: 962, Y: 98},
	{X: 268, Y: 290},
	{X: 358, Y: 66},
	{X: 117, Y: 689},
	{X: 835, Y: 438},
	{X: 176, Y: 45},
	{X: 45, Y: 17},
	{X: 713, Y: 567},
	{X: 1026, Y: 233},
	{X: 271, Y: 666},
	{X: 1014, Y: 842},
	{X: 1232, Y: 35},
	{X: 592, Y: 843},
	{X: 1196, Y: 239},
	{X: 934, Y: 95},
	{X: 576, Y: 35},
	{X: 1242, Y: 726},
	{X: 354, Y: 250},
	{X: 239, Y: 113},
	{X: 171, Y: 19},
	{X: 189, Y: 14},
	{X: 1280, Y: 623},
	{X: 842, Y: 413},
	{X: 1240, Y: 267},
	{X: 109, Y: 420},
	{X: 306, Y: 175},
	{X: 889, Y: 448},
	{X: 740, Y: 742},
	{X: 1190, Y: 576},
	{X: 920, Y: 51},
	{X: 910, Y: 774},
	{X: 1059, Y: 753},
	{X: 475, Y: 456},
	{X: 522, Y: 724},
	{X: 141, Y: 10},
	{X: 1169, Y: 110},
	{X: 554, Y: 843},
	{X: 513, Y: 318},
	{X: 977, Y: 638},
	{X: 997, Y: 621},
	{X: 1280, Y: 445},
	{X: 73, Y: 311},
	{X: 358, Y: 380},
	{X: 1210, Y: 886},
	{X: 477, Y: 273},
	{X: 1151, Y: 476},
	{X: 370, Y: 109},
	{X: 977, Y: 893},
	{X: 734, Y: 35},
	{X: 423, Y: 710},
	{X: 1088, Y: 10},
	{X: 832, Y: 583},
	{X: 537, Y: 176},
	{X: 383, Y: 814},
	{X: 843, Y: 684},
	{X: 403, Y: 499},
	{X: 1026, Y: 9},
	{X: 468, Y: 413},
	{X: 855, Y: 158},
	{X: 728, Y: 145},
	{X: 388, Y: 759},
	{X: 109, Y: 26},
	{X: 77, Y: 332},
	{X: 1305, Y: 499},
	{X: 383, Y: 855},
	{X: 1280, Y: 604},
	{X: 33, Y: 264},
	{X: 470, Y: 660},
	{X: 671, Y: 410},
	{X: 893, Y: 807},
	{X: 1073, Y: 807},
	{X: 1241, Y: 280},
	{X: 873, Y: 56},
	{X: 674, Y: 633},
	{X: 1232, Y: 411},
	{X: 100, Y: 365},
	{X: 691, Y: 830},
	{X: 639, Y: 484},
	{X: 895, Y: 171},
	{X: 378, Y: 863},
	{X: 1292, Y: 709},
	{X: 142, Y: 207},
	{X: 341, Y: 497},
	{X: 50, Y: 602},
	{X: 385, Y: 775},
	{X: 512, Y: 660},
	{X: 624, Y: 604},
	{X: 1237, Y: 583},
	{X: 343, Y: 662},
	{X: 1069, Y: 522},
	{X: 674, Y: 634},
	{X: 838, Y: 212},
	{X: 835, Y: 456},
	{X: 354, Y: 644},
	{X: 987, Y: 574},
	{X: 187, Y: 348},
	{X: 554, Y: 227},
	{X: 1169, Y: 576},
	{X: 109, Y: 474},
	{X: 5, Y: 449},
	{X: 955, Y: 502},
	{X: 691, Y: 684},
	{X: 293, Y: 488},
	{X: 17, Y: 768},
	{X: 570, Y: 152},
	{X: 962, Y: 12},
	{X: 281, Y: 127},
	{X: 897, Y: 332},
	{X: 1138, Y: 207},
	{X: 475, Y: 438},
	{X: 850, Y: 78},
	{X: 634, Y: 567},
	{X: 1139, Y: 238},
	{X: 1218, Y: 747},
	{X: 376, Y: 239},
	{X: 100, Y: 456},
	{X: 464, Y: 616},
	{X: 536, Y: 287},
	{X: 355, Y: 884},
	{X: 825, Y: 499},
	{X: 1262, Y: 400},
	{X: 472, Y: 186},
	{X: 882, Y: 37},
	{X: 21, Y: 112},
	{X: 1193, Y: 15},
	{X: 634, Y: 458},
	{X: 296, Y: 828},
	{X: 870, Y: 785},
	{X: 609, Y: 669},
	{X: 1059, Y: 141},
	{X: 587, Y: 178},
	{X: 1151, Y: 82},
	{X: 636, Y: 633},
	{X: 305, Y: 884},
	{X: 231, Y: 626},
	{X: 565, Y: 863},
	{X: 1044, Y: 707},
	{X: 330, Y: 75},
	{X: 905, Y: 275},
	{X: 1201, Y: 474},
	{X: 865, Y: 176},
	{X: 937, Y: 673},
	{X: 325, Y: 217},
	{X: 82, Y: 50},
	{X: 786, Y: 491},
	{X: 1056, Y: 667},
	{X: 84, Y: 600},
	{X: 435, Y: 30},
	{X: 346, Y: 261},
	{X: 1124, Y: 278},
	{X: 827, Y: 875},
	{X: 586, Y: 493},
	{X: 706, Y: 490},
	{X: 783, Y: 288},
	{X: 1026, Y: 213},
	{X: 969, Y: 173},
	{X: 35, Y: 548},
	{X: 1017, Y: 488},
	{X: 537, Y: 431},
	{X: 800, Y: 794},
	{X: 370, Y: 457},
	{X: 1201, Y: 420},
	{X: 791, Y: 420},
	{X: 540, Y: 326},
	{X: 1218, Y: 299},
	{X: 815, Y: 389},
	{X: 1039, Y: 855},
	{X: 997, Y: 397},
	{X: 25, Y: 443},
	{X: 1098, Y: 774},
	{X: 637, Y: 75},
	{X: 651, Y: 768},
	{X: 1168, Y: 682},
	{X: 397, Y: 838},
	{X: 77, Y: 85},
	{X: 306, Y: 255},
	{X: 269, Y: 663},
	{X: 597, Y: 327},
	{X: 825, Y: 589},
	{X: 745, Y: 835},
	{X: 18, Y: 794},
	{X: 189, Y: 595},
	{X: 1001, Y: 126},
	{X: 643, Y: 219},
	{X: 1304, Y: 413},
	{X: 1223, Y: 723},
	{X: 437, Y: 502},
	{X: 100, Y: 723},
	{X: 889, Y: 672},
	{X: 1215, Y: 683},
	{X: 1059, Y: 499},
	{X: 1262, Y: 494},
	{X: 1282, Y: 784},
	{X: 870, Y: 557},
	{X: 1102, Y: 287},
	{X: 997, Y: 358},
	{X: 893, Y: 87},
	{X: 1032, Y: 494},
	{X: 373, Y: 429},
	{X: 387, Y: 301},
	{X: 1237, Y: 642},
	{X: 388, Y: 595},
	{X: 535, Y: 187},
	{X: 1288, Y: 660},
	{X: 1046, Y: 51},
	{X: 1093, Y: 838},
	{X: 1044, Y: 495},
	{X: 1084, Y: 619},
	{X: 440, Y: 557},
	{X: 1293, Y: 187},
	{X: 346, Y: 570},
	{X: 792, Y: 644},
	{X: 413, Y: 332},
	{X: 832, Y: 54},
	{X: 1299, Y: 219},
	{X: 383, Y: 666},
	{X: 1044, Y: 135},
	{X: 934, Y: 400},
	{X: 763, Y: 814},
	{X: 940, Y: 437},
	{X: 661, Y: 445},
	{X: 1026, Y: 337},
	{X: 1305, Y: 445},
	{X: 910, Y: 227},
	{X: 682, Y: 308},
	{X: 42, Y: 688},
	{X: 370, Y: 95},
	{X: 191, Y: 268},
	{X: 1002, Y: 772},
	{X: 343, Y: 214},
	{X: 1210, Y: 723},
	{X: 306, Y: 799},
	{X: 1029, Y: 575},
	{X: 738, Y: 844},
	{X: 1290, Y: 119},
	{X: 199, Y: 879},
	{X: 485, Y: 395},
	{X: 1228, Y: 50},
	{X: 455, Y: 158},
	{X: 157, Y: 365},
	{X: 57, Y: 567},
	{X: 1104, Y: 849},
	{X: 1121, Y: 747},
	{X: 1158, Y: 171},
	{X: 1272, Y: 96},
	{X: 78, Y: 411},
	{X: 264, Y: 51},
	{X: 539, Y: 89},
	{X: 237, Y: 843},
	{X: 979, Y: 499},
	{X: 331, Y: 395},
	{X: 1277, Y: 740},
	{X: 445, Y: 210},
	{X: 141, Y: 318},
	{X: 94, Y: 54},
	{X: 464, Y: 250},
	{X: 991, Y: 686},
	{X: 1260, Y: 131},
	{X: 341, Y: 358},
	{X: 142, Y: 212},
	{X: 1169, Y: 128},
	{X: 1056, Y: 326},
	{X: 684, Y: 112},
	{X: 949, Y: 264},
	{X: 840, Y: 660},
	{X: 733, Y: 361},
	{X: 644, Y: 633},
	{X: 57, Y: 119},
	{X: 884, Y: 553},
	{X: 341, Y: 536},
	{X: 882, Y: 409},
	{X: 1151, Y: 25},
	{X: 30, Y: 333},
	{X: 512, Y: 682},
	{X: 47, Y: 425},
	{X: 261, Y: 522},
	{X: 1123, Y: 658},
	{X: 686, Y: 604},
	{X: 633, Y: 212},
	{X: 706, Y: 315},
	{X: 171, Y: 238},
	{X: 950, Y: 627},
	{X: 53, Y: 756},
	{X: 1124, Y: 369},
	{X: 1289, Y: 782},
	{X: 313, Y: 273},
	{X: 233, Y: 672},
	{X: 2, Y: 432},
	{X: 437, Y: 56},
	{X: 141, Y: 576},
	{X: 221, Y: 887},
	{X: 564, Y: 705},
	{X: 385, Y: 679},
	{X: 576, Y: 859},
	{X: 594, Y: 12},
	{X: 1166, Y: 731},
	{X: 1275, Y: 239},
	{X: 770, Y: 326},
	{X: 552, Y: 105},
	{X: 278, Y: 400},
	{X: 1124, Y: 616},
	{X: 1123, Y: 236},
	{X: 940, Y: 457},
	{X: 976, Y: 481},
	{X: 678, Y: 861},
	{X: 1004, Y: 95},
	{X: 1168, Y: 234},
	{X: 662, Y: 861},
	{X: 512, Y: 212},
	{X: 1206, Y: 10},
	{X: 284, Y: 457},
	{X: 676, Y: 660},
	{X: 1203, Y: 668},
	{X: 211, Y: 693},
	{X: 923, Y: 301},
	{X: 800, Y: 548},
	{X: 775, Y: 707},
	{X: 1026, Y: 557},
	{X: 922, Y: 495},
	{X: 294, Y: 267},
	{X: 370, Y: 437},
	{X: 604, Y: 490},
	{X: 1029, Y: 109},
	{X: 181, Y: 350},
	{X: 1119, Y: 268},
	{X: 1086, Y: 329},
	{X: 321, Y: 1},
	{X: 666, Y: 633},
	{X: 791, Y: 474},
	{X: 691, Y: 64},
	{X: 793, Y: 226},
	{X: 1039, Y: 39},
	{X: 428, Y: 37},
	{X: 667, Y: 227},
	{X: 358, Y: 445},
	{X: 554, Y: 723},
	{X: 689, Y: 602},
	{X: 388, Y: 259},
	{X: 400, Y: 227},
	{X: 826, Y: 768},
	{X: 20, Y: 322},
	{X: 567, Y: 171},
	{X: 1153, Y: 529},
	{X: 301, Y: 798},
	{X: 1168, Y: 484},
}

type FoldInstruction struct {
	Horizontal bool
	FoldAlong  int
}

var FoldInstructions = []FoldInstruction{
	{Horizontal: false, FoldAlong: 655},
	{Horizontal: true, FoldAlong: 447},
	{Horizontal: false, FoldAlong: 327},
	{Horizontal: true, FoldAlong: 223},
	{Horizontal: false, FoldAlong: 163},
	{Horizontal: true, FoldAlong: 111},
	{Horizontal: false, FoldAlong: 81},
	{Horizontal: true, FoldAlong: 55},
	{Horizontal: false, FoldAlong: 40},
	{Horizontal: true, FoldAlong: 27},
	{Horizontal: true, FoldAlong: 13},
	{Horizontal: true, FoldAlong: 6},
}

type Halves struct {
	Lower  map[string]Dot
	Higher map[string]Dot
}

func AsMap(horizontal bool, split int, dots []Dot) Halves {
	halves := Halves{Lower: make(map[string]Dot), Higher: make(map[string]Dot)}

	for _, dot := range dots {
		if horizontal && (dot.Y == split || dot.Y > split*2) {
			continue
		}

		if !horizontal && (dot.X == split || dot.X > split*2) {
			continue
		}

		if horizontal && dot.Y < split {
			halves.Lower[DotToString(&dot)] = dot
		} else if horizontal && dot.Y > split {
			halves.Higher[DotToString(&dot)] = dot
		}

		if !horizontal && dot.X < split {
			halves.Lower[DotToString(&dot)] = dot
		} else if !horizontal && dot.X > split {
			halves.Higher[DotToString(&dot)] = dot
		}
	}

	return halves
}

func LowerToDots(lowerDots map[string]Dot) ([]Dot, Dot) {
	dots := make([]Dot, len(lowerDots))
	rangeDot := Dot{X: 0, Y: 0}
	for _, d := range lowerDots {
		dots = append(dots, d)
		if rangeDot.X < d.X {
			rangeDot.X = d.X
		}
		if rangeDot.Y < d.Y {
			rangeDot.Y = d.Y
		}
	}

	return dots, rangeDot
}
